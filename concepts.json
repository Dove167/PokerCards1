{
  "concepts": [
    { "card": "Ace of Spades", "concept": "Variables (let, const, var)", "explanation": "Declaring and assigning values to variables, understanding scope differences.", "code_example": "let x = 10;\nconst y = 'hello';\nvar z = true;" },
    { "card": "King of Spades", "concept": "Data Types (Primitive)", "explanation": "Numbers, Strings, Booleans, Null, Undefined, Symbol, BigInt.", "code_example": "let num = 10;\nlet str = 'text';\nlet bool = false;\nlet n = null;\nlet u = undefined;\nlet sym = Symbol('id');\nlet big = 10n;" },
    { "card": "Queen of Spades", "concept": "Data Types (Object)", "explanation": "Objects, Arrays, Functions.", "code_example": "let obj = { a: 1 };\nlet arr = [1, 2, 3];\nfunction func() {}" },
    { "card": "Jack of Spades", "concept": "Operators (Arithmetic)", "explanation": "Addition, Subtraction, Multiplication, Division, Modulo, Exponentiation.", "code_example": "let a = 5 + 3;\nlet b = 10 - 2;\nlet c = 4 * 2;\nlet d = 10 / 2;\nlet e = 10 % 3;\nlet f = 2 ** 3;" },
    { "card": "10 of Spades", "concept": "Operators (Comparison)", "explanation": "Equality (==, ===), Inequality (!=, !==), Greater/Less than.", "code_example": "1 == '1'; // true\n1 === '1'; // false\n5 > 3; // true\n2 <= 2; // true" },
    { "card": "9 of Spades", "concept": "Operators (Logical)", "explanation": "AND (&&), OR (||), NOT (!).", "code_example": "true && false; // false\ntrue || false; // true\n!true; // false" },
    { "card": "8 of Spades", "concept": "Conditional Statements (if/else)", "explanation": "Executing code based on conditions.", "code_example": "if (x > 0) {\n  console.log('Positive');\n} else {\n  console.log('Non-positive');\n}" },
    { "card": "7 of Spades", "concept": "Conditional Statements (switch)", "explanation": "Multi-way branching based on a value.", "code_example": "let day = 'Monday';\nswitch (day) {\n  case 'Monday':\n    console.log('Start of week');\n    break;\n  default:\n    console.log('Other day');\n}" },
    { "card": "6 of Spades", "concept": "Loops (for)", "explanation": "Iterating a specific number of times.", "code_example": "for (let i = 0; i < 5; i++) {\n  console.log(i);\n}" },
    { "card": "5 of Spades", "concept": "Loops (while/do-while)", "explanation": "Iterating while a condition is true.", "code_example": "let i = 0;\nwhile (i < 3) {\n  console.log(i++);\n}\nlet j = 0;\ndo {\n  console.log(j++);\n} while (j < 0);" },
    { "card": "4 of Spades", "concept": "Functions (Declaration)", "explanation": "Defining reusable blocks of code.", "code_example": "function greet(name) {\n  return `Hello, ${name}!`;\n}" },
    { "card": "3 of Spades", "concept": "Functions (Expression)", "explanation": "Assigning functions to variables.", "code_example": "const greet = function(name) {\n  return `Hello, ${name}!`;\n};" },
    { "card": "2 of Spades", "concept": "Arrow Functions", "explanation": "Concise syntax for functions, 'this' binding.", "code_example": "const add = (a, b) => a + b;\nconst greet = name => `Hello, ${name}!`;" },

    { "card": "Ace of Hearts", "concept": "Arrays (Creation & Access)", "explanation": "Creating arrays, accessing elements by index.", "code_example": "const arr = [1, 2, 3];\nconsole.log(arr[0]); // 1" },
    { "card": "King of Hearts", "concept": "Array Methods (forEach)", "explanation": "Iterating over array elements.", "code_example": "const arr = [1, 2, 3];\narr.forEach(item => console.log(item));" },
    { "card": "Queen of Hearts", "concept": "Array Methods (map)", "explanation": "Transforming array elements into a new array.", "code_example": "const arr = [1, 2, 3];\nconst doubled = arr.map(item => item * 2); // [2, 4, 6]" },
    { "card": "Jack of Hearts", "concept": "Array Methods (filter)", "explanation": "Creating a new array with elements that pass a test.", "code_example": "const arr = [1, 2, 3, 4];\nconst evens = arr.filter(item => item % 2 === 0); // [2, 4]" },
    { "card": "10 of Hearts", "concept": "Array Methods (reduce)", "explanation": "Aggregating array elements into a single value.", "code_example": "const arr = [1, 2, 3];\nconst sum = arr.reduce((acc, item) => acc + item, 0); // 6" },
    { "card": "9 of Hearts", "concept": "Array Methods (find/findIndex)", "explanation": "Finding an element or its index.", "code_example": "const arr = [{id: 1}, {id: 2}];\nconst item = arr.find(i => i.id === 2); // {id: 2}\nconst index = arr.findIndex(i => i.id === 2); // 1" },
    { "card": "8 of Hearts", "concept": "Array Methods (some/every)", "explanation": "Checking if some/all elements pass a test.", "code_example": "const arr = [1, 2, 3];\narr.some(item => item > 2); // true\narr.every(item => item > 0); // true" },
    { "card": "7 of Hearts", "concept": "Objects (Creation & Access)", "explanation": "Creating objects, accessing properties.", "code_example": "const obj = { name: 'Alice', age: 30 };\nconsole.log(obj.name); // 'Alice'\nconsole.log(obj['age']); // 30" },
    { "card": "6 of Hearts", "concept": "Object Methods (keys, values, entries)", "explanation": "Iterating over object properties.", "code_example": "const obj = { a: 1, b: 2 };\nObject.keys(obj); // ['a', 'b']\nObject.values(obj); // [1, 2]\nObject.entries(obj); // [['a', 1], ['b', 2]]" },
    { "card": "5 of Hearts", "concept": "Destructuring (Array)", "explanation": "Extracting values from arrays into distinct variables.", "code_example": "const [first, second] = [1, 2];\nconsole.log(first); // 1" },
    { "card": "4 of Hearts", "concept": "Destructuring (Object)", "explanation": "Extracting properties from objects into distinct variables.", "code_example": "const { name, age } = { name: 'Bob', age: 25 };\nconsole.log(name); // 'Bob'" },
    { "card": "3 of Hearts", "concept": "Spread/Rest Operator", "explanation": "Expanding iterables, collecting arguments.", "code_example": "const arr1 = [1, 2];\nconst arr2 = [...arr1, 3]; // [1, 2, 3]\nfunction sum(...args) { return args.reduce((a, b) => a + b); }" },
    { "card": "2 of Hearts", "concept": "Template Literals", "explanation": "String interpolation and multi-line strings.", "code_example": "const name = 'World';\nconst greeting = `Hello, ${name}!`;\nconst multiLine = `Line 1\nLine 2`;" },

    { "card": "Ace of Clubs", "concept": "Callbacks", "explanation": "Functions passed as arguments to other functions.", "code_example": "function fetchData(callback) {\n  setTimeout(() => callback('Data fetched'), 1000);\n}\nfetchData(data => console.log(data));" },
    { "card": "King of Clubs", "concept": "Promises (Basics)", "explanation": "Handling asynchronous operations, pending/resolved/rejected states.", "code_example": "const myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => resolve('Success!'), 1000);\n});\nmyPromise.then(msg => console.log(msg));" },
    { "card": "Queen of Clubs", "concept": "Promises (Chaining)", "explanation": "Sequencing asynchronous operations.", "code_example": "fetch('/api/data')\n  .then(response => response.json())\n  .then(data => console.log(data));" },
    { "card": "Jack of Clubs", "concept": "Async/Await", "explanation": "Syntactic sugar for promises, writing asynchronous code synchronously.", "code_example": "async function getData() {\n  const response = await fetch('/api/data');\n  const data = await response.json();\n  console.log(data);\n}" },
    { "card": "10 of Clubs", "concept": "Error Handling (try/catch)", "explanation": "Handling runtime errors.", "code_example": "try {\n  throw new Error('Something went wrong');\n} catch (error) {\n  console.error(error.message);\n}" },
    { "card": "9 of Clubs", "concept": "Classes (Basics)", "explanation": "Blueprints for creating objects, constructors.", "code_example": "class Dog {\n  constructor(name) { this.name = name; }\n  bark() { console.log(`${this.name} barks!`); }\n}\nconst myDog = new Dog('Buddy');" },
    { "card": "8 of Clubs", "concept": "Classes (Inheritance)", "explanation": "Extending classes, `super` keyword.", "code_example": "class Animal { constructor(name) { this.name = name; } }\nclass Cat extends Animal {\n  constructor(name) { super(name); }\n  meow() { console.log(`${this.name} meows!`); }\n}" },
    { "card": "7 of Clubs", "concept": "Modules (ESM Import/Export)", "explanation": "Organizing code into reusable modules.", "code_example": "// math.js\nexport const add = (a, b) => a + b;\n// app.js\nimport { add } from './math.js';" },
    { "card": "6 of Clubs", "concept": "JSON (Parse/Stringify)", "explanation": "Converting between JSON strings and JavaScript objects.", "code_example": "const jsonStr = '{\"name\":\"Alice\"}';\nconst obj = JSON.parse(jsonStr);\nconst newJsonStr = JSON.stringify(obj);" },
    { "card": "5 of Clubs", "concept": "Event Loop", "explanation": "Understanding JavaScript's concurrency model.", "code_example": "console.log('1');\nsetTimeout(() => console.log('2'), 0);\nPromise.resolve().then(() => console.log('3'));\nconsole.log('4'); // Output: 1, 4, 3, 2" },
    { "card": "4 of Clubs", "concept": "Closures", "explanation": "Functions remembering their lexical environment.", "code_example": "function outer() {\n  let count = 0;\n  return function inner() { return ++count; };\n}\nconst counter = outer();\nconsole.log(counter()); // 1" },
    { "card": "3 of Clubs", "concept": "Hoisting", "explanation": "Variable and function declarations moved to the top of their scope.", "code_example": "console.log(a); // undefined\nvar a = 5;\nconsole.log(b); // ReferenceError\nlet b = 10;\ngreet(); // 'Hello'\nfunction greet() { console.log('Hello'); }" },
    { "card": "2 of Clubs", "concept": "This Keyword", "explanation": "Context of function execution.", "code_example": "const obj = { name: 'Alice', greet: function() { console.log(this.name); } };\nobj.greet(); // 'Alice'\nconst greetFunc = obj.greet;\ngreetFunc(); // undefined (in non-strict mode)" },

    { "card": "Ace of Diamonds", "concept": "Prototypes", "explanation": "Object-oriented inheritance in JavaScript.", "code_example": "function Person(name) { this.name = name; }\nPerson.prototype.greet = function() { console.log(`Hello, ${this.name}`); };\nconst alice = new Person('Alice');" },
    { "card": "King of Diamonds", "concept": "Higher-Order Functions", "explanation": "Functions that take or return other functions.", "code_example": "function operate(func, a, b) { return func(a, b); }\nconst add = (x, y) => x + y;\noperate(add, 5, 3); // 8" },
    { "card": "Queen of Diamonds", "concept": "Currying", "explanation": "Transforming functions to take arguments one at a time.", "code_example": "const multiply = (a) => (b) => a * b;\nconst multiplyBy5 = multiply(5);\nmultiplyBy5(10); // 50" },
    { "card": "Jack of Diamonds", "concept": "Composition", "explanation": "Combining simple functions to build more complex ones.", "code_example": "const add1 = x => x + 1;\nconst multiply2 = x => x * 2;\nconst compose = (f, g) => x => f(g(x));\nconst add1ThenMultiply2 = compose(multiply2, add1);\nadd1ThenMultiply2(5); // 12" },
    { "card": "10 of Diamonds", "concept": "Generators", "explanation": "Functions that can be paused and resumed, yielding multiple values.", "code_example": "function* idGenerator() {\n  let id = 1;\n  while (true) yield id++;\n}\nconst gen = idGenerator();\nconsole.log(gen.next().value); // 1" },
    { "card": "9 of Diamonds", "concept": "Iterators", "explanation": "Objects that define a sequence and a return value upon its termination.", "code_example": "const myIterable = {\n  [Symbol.iterator]: function* () {\n    yield 1; yield 2; yield 3;\n  }\n};\nfor (const val of myIterable) console.log(val);" },
    { "card": "8 of Diamonds", "concept": "Proxies", "explanation": "Creating custom behavior for fundamental operations.", "code_example": "const handler = { get: (obj, prop) => prop === 'name' ? 'Proxy' : obj[prop] };\nconst proxy = new Proxy({ name: 'Real' }, handler);\nconsole.log(proxy.name); // 'Proxy'" },
    { "card": "7 of Diamonds", "concept": "Reflect API", "explanation": "Methods for interceptable JavaScript operations.", "code_example": "const obj = { a: 1 };\nReflect.set(obj, 'b', 2);\nconsole.log(obj.b); // 2" },
    { "card": "6 of Diamonds", "concept": "Sets", "explanation": "Collections of unique values.", "code_example": "const mySet = new Set([1, 2, 2, 3]);\nconsole.log(mySet.size); // 3" },
    { "card": "5 of Diamonds", "concept": "Maps", "explanation": "Collections of key-value pairs, where keys can be any data type.", "code_example": "const myMap = new Map();\nmyMap.set('name', 'Alice');\nconsole.log(myMap.get('name')); // 'Alice'" },
    { "card": "4 of Diamonds", "concept": "WeakSet/WeakMap", "explanation": "Collections that hold weak references to objects.", "code_example": "let obj = {};\nconst ws = new WeakSet([obj]);\nobj = null; // obj can be garbage collected" },
    { "card": "3 of Diamonds", "concept": "Web Workers", "explanation": "Running scripts in background threads.", "code_example": "// In main thread:\nconst worker = new Worker('worker.js');\nworker.postMessage('Hello from main!');\n// In worker.js:\nself.onmessage = (e) => console.log(e.data);" },
    { "card": "2 of Diamonds", "concept": "Module Bundlers (e.g., Webpack, Rollup)", "explanation": "Combining multiple JavaScript files into a single bundle.", "code_example": "// Conceptual example, not runnable JS code\n// webpack.config.js: entry, output, modules, plugins\n// rollup.config.js: input, output, plugins" }
  ]
}